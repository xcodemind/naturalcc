##################### default args #####################
common:
  thread_num: 2 # （固定，不要调）load and process data with multi-process
  seed: 666 # （固定，不要调）init seed for numpy/torch/random/scipy and so on
  device: 0 # GPU device. if None, as CPU

  init_weights: ~  # None, xulu, xulu2, xulu3
  #  init_weights: '/data/wanyao/ghproj_d/naturalcodev2/datasetv2/result/summarization/mm2seq/ruby/train_sl/tok8path_pointerTrue/tok8path-bs128-lr0.0004-attndot-pointerTrue-best-bleu1.pt'

  init_bound: 1e-1 # （固定，不要调）
  init_normal_std: 1e-4 # （固定，不要调）
  result_table_format: 'github' # （固定，不要调）latex (https://pypi.org/project/tabulate/)

dataset:
  #  dataset_dir: '/data/wanyao/yang/ghproj_d/GitHub/datasetv2/key/200'
  dataset_dir: '/data/wanyao/yang/ghproj_d/GitHub/datasetv2/key/100_small'
  # save your model and eval files
  save_dir: '/data/wanyao/ghproj_d/naturalcodev2/datasetv2/result/retrieval'
  ##################### dataset and other args #####################
  # dict files(tok, tree, path sbt, sbt2, code_tokens, docstring_tokens, method)
  # load from code_modalities

  tree_leaf_subtoken: True
  portion: ~ # 0.4 # train data portion, 0~1.0
  leaf_path_k: 50 #（固定，不要调）
  source:
    dataset_lng:
      - 'ruby'

    mode:
      - 'train'
      - 'valid'

  target:
    ~


training:
  ##################### model args #####################
  #  summarization: tok, ast, path sbt, sbt2
  #  retrieval: code_tokens, docstring_tokens, method
  code_modalities:
    - 'code_tokens'
    - 'docstring_tokens'

  train_epoch: 50 #  for hash
  batch_size: 128 # 128
  log_interval: 5 # （固定，不要调）write log info per log_interval iteration
  # network: encoder
  rnn_type: 'LSTM' # （固定，不要调）RNN type: 'GRU','LSTM', LSTM as default
  rnn_layer_num: 1 # （固定，不要调）RNN layer num
  rnn_hidden_size: 512 # （固定，不要调）RNN hidden size
  rnn_bidirectional: False # （固定，不要调）
  embed_size: 300 # （固定，不要调）word-embedding size
  tree_lstm_cell_type: 'nary' # （固定，不要调）DGL tree LSTM cell, if nary -> TreeLSTMCell, else    -> ChildSumTreeLSTMCell
  code_modal_transform: False # （固定，不要调）False # code modalities transform with FCs
  conv2d_out_channels: 512 # （固定，不要调）
  conv2d_kernels: # （固定，不要调）
    - 2
    - 3
    - 4
    - 5
  embed_pooling: ~

  # encoder RNN's output as decoder RNN's hidden_state(h, c)
  # 1) None, for zero_init as decoder RNN's hidden_state
  # 2) h, for only encoder RNN's output as decoder RNN's hidden_state(h)
  # 3) c, for only encoder RNN's output as decoder RNN's hidden_state(c)
  # 3) hc, for encoder RNN's output as decoder RNN's hidden_state(h, c)
  enc_hc2dec_hc: 'h' # （固定，不要调）'hc', 'h'

  # network: decoder
  attn_type: ~ # ~, general, dot, mlp, intra
  attn_unit: 512 # （固定，不要调）
  self_attn_size: 50 # （固定，不要调）
  #  intra_attn_eps: 1e-12
  pointer: False # pointer-generator, True, False
  max_predict_length: 60 # （固定，不要调）max generation length for decoder
  dropout: 0.2 # （固定，不要调）dropout
  decoder_input_feed: False # （固定，不要调）True, False

  # conv1d
  conv1d_out_channels: 512
  conv1d_kernel_size: 3
  conv1d_padding: 'same'
  conv1d_pooling: 'max'
  conv1d_activate_func: 'tanh'

# inference
testing:
  beam_size: 10
  max_predict_length: ~ # max generation length for decoder

  metrics:
    - 'bleu'
    #    - 'meteor'
    #    - 'rouge'
    - 'cider'

# supervised learning
sl:
  optim: 'Adam' # （固定，不要调）'Adam', 'AdamW', 'Adagrad', 'RMSprop', 'SGD'

  # default
  lr: 5e-4 # 默认最优
  lr_gamma: 0.5 # （固定，不要调）0.1
  lr_milestones: # 默认最优，epochs when lr => lr * lr_gamma
    - 20 # 1e-4
    - 40 # 1e-5

  warmup_factor: 0.2 #（固定，不要调）
  warmup_epochs: -1 # （固定，不要调）-1: no warmup
  max_grad_norm: -1 # （固定，不要调）-1: no gradient clips  1.0, 10, 20, 100



# adversarial learning
al:
  optim: 'Adam'
  lr: 1e-3
  lr_gamma: 0.1 # 0.1
  lr_milestones: # epochs when lr => lr * lr_gamma
    - 20 # 1e-4
    - 40 # 1e-5
  warmup_factor: 0.2
  warmup_epochs: 1

# hashing
hash:
  optim: 'SGD'
  lr: 0.03162277660168379 # 10 ** (-1.5)
  lr_gamma: 0.1 # 0.1
  lr_milestones: # epochs when lr => lr * lr_gamma
    - 20 # 1e-4
    - 40 # 1e-5
  warmup_factor: 0.2
  warmup_epochs: 1

  bit: 8
  activation: 'sign'